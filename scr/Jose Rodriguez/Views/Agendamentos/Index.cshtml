@model LoginCadastroMVC.Models.AgendamentoViewModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agendamento de Consulta Odontológica</title>
    <style>
        :root {
            --primary: #C6A16F;
            --secondary: #f5f5f5;
            --text-dark: #f0f0f0;
            --text-light: #aaa;
            --border-color: #444;
            --background-black: #121212;
        }

        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            background-color: var(--background-black);
            margin: 0;
            padding: 0;
            color: var(--text-dark);
        }

        .appointment-container {
            display: flex;
            max-width: 1000px;
            margin: 20px auto;
            background-color: var(--background-black);
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
            overflow: hidden;
        }

        /* Calendar Section */
        .calendar-section {
            width: 45%;
            background-color: white;
            color: black;
            padding: 20px;
        }

        .month-nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

            .month-nav button {
                background: none;
                border: none;
                color: black;
                cursor: pointer;
                font-size: 18px;
            }

        .month-header {
            text-align: center;
            padding: 10px 0;
            font-weight: bold;
            font-size: 18px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            margin-bottom: 10px;
        }

        .days-header {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            text-align: center;
            font-size: 12px;
            margin-bottom: 10px;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }

        .calendar-day {
            aspect-ratio: 1/1;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            border-radius: 5px;
            cursor: pointer;
            background-color: #f0f0f0;
        }

            .calendar-day.inactive {
                color: rgba(0, 0, 0, 0.3);
                cursor: default;
                background-color: #f8f8f8;
            }

            .calendar-day.weekend {
                color: rgba(0, 0, 0, 0.3);
                cursor: not-allowed;
                position: relative;
            }

                .calendar-day.weekend::after {
                    content: "";
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background: rgba(255, 0, 0, 0.1);
                    border-radius: 5px;
                    pointer-events: none;
                }

            .calendar-day.past {
                color: rgba(0, 0, 0, 0.3);
                cursor: not-allowed;
                position: relative;
            }

                .calendar-day.past::after {
                    content: "";
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background: rgba(255, 0, 0, 0.1);
                    border-radius: 5px;
                    pointer-events: none;
                }

            .calendar-day.selected {
                background-color: var(--primary);
                color: white;
            }

        .time-slots {
            margin-top: 20px;
        }

        .time-slots-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .time-slots-info {
            font-size: 12px;
            color: rgba(0, 0, 0, 0.7);
        }

        .time-slots-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin-top: 10px;
        }

        .time-slot {
            background-color: #f0f0f0;
            padding: 5px;
            text-align: center;
            border-radius: 5px;
            font-size: 12px;
            cursor: pointer;
        }

            .time-slot.selected {
                background-color: var(--primary);
                color: white;
            }

            .time-slot:hover {
                background-color: #e0e0e0;
            }

        /* Form Section */
        .form-section {
            width: 55%;
            padding: 20px;
            background-color: var(--background-black);
        }

        .form-header {
            text-align: center;
            font-size: 22px;
            color: var(--text-dark);
            margin-bottom: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-control {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            font-size: 14px;
            background-color: #1e1e1e;
            color: var(--text-dark);
        }

        textarea.form-control {
            resize: vertical;
            min-height: 80px;
        }

        .specialty-dropdown {
            position: relative;
        }

        .specialty-select {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            background-color: #1e1e1e;
            color: var(--text-dark);
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

            .specialty-select:after {
                content: "▼";
                font-size: 12px;
                color: var(--text-light);
            }

        .specialty-options {
            position: absolute;
            width: 100%;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
            background-color: #1e1e1e;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.5);
            z-index: 10;
        }

            .specialty-options.show {
                max-height: 200px;
                overflow-y: auto;
                border: 1px solid var(--border-color);
            }

        .specialty-option {
            padding: 10px 12px;
            cursor: pointer;
            color: var(--text-dark);
        }

            .specialty-option:hover {
                background-color: #2c2c2c;
            }

        .submit-btn {
            width: 100%;
            background-color: var(--primary);
            color: white;
            border: none;
            padding: 12px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 15px;
        }

            .submit-btn:hover {
                background-color: #b5814a;
            }

        .text-danger {
            color: #C6A16F;
            font-size: 12px;
            margin-top: 4px;
            display: block;
        }

        .alert-success {
            background-color: #2c2c2c;
            color: #C6A16F;
            padding: 12px;
            border-radius: 5px;
            margin-top: 20px;
        }

        @@media (max-width: 768px) {
            .appointment-container {
                flex-direction: column;
            }

            .calendar-section, .form-section {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="appointment-container">
        <div class="calendar-section">
            <div class="month-nav">
                <button id="prev-month">&lt;</button>
                <div class="month-header" id="current-month">Maio 2025</div>
                <button id="next-month">&gt;</button>
            </div>
            <div class="days-header">
                <div>Dom</div>
                <div>Seg</div>
                <div>Ter</div>
                <div>Qua</div>
                <div>Qui</div>
                <div>Sex</div>
                <div>Sáb</div>
            </div>
            <div class="calendar-grid" id="calendar-grid">
                <!-- Calendar days will be generated by JavaScript -->
            </div>

            <div class="time-slots">
                <div class="time-slots-header">
                    <div>Horários Disponíveis:</div>
                    <div class="time-slots-info">10h às 19h (Seg-Sex)</div>
                </div>
                <div class="time-slots-grid">
                    <div class="time-slot" data-time="10:00">10:00</div>
                    <div class="time-slot" data-time="10:30">10:30</div>
                    <div class="time-slot" data-time="11:00">11:00</div>
                    <div class="time-slot" data-time="11:30">11:30</div>
                    <div class="time-slot" data-time="12:00">12:00</div>
                    <div class="time-slot" data-time="13:30">13:30</div>
                    <div class="time-slot" data-time="14:00">14:00</div>
                    <div class="time-slot" data-time="14:30">14:30</div>
                    <div class="time-slot" data-time="15:00">15:00</div>
                    <div class="time-slot" data-time="15:30">15:30</div>
                    <div class="time-slot" data-time="16:00">16:00</div>
                    <div class="time-slot" data-time="16:30">16:30</div>
                    <div class="time-slot" data-time="17:00">17:00</div>
                    <div class="time-slot" data-time="17:30">17:30</div>
                    <div class="time-slot" data-time="18:00">18:00</div>
                    <div class="time-slot" data-time="18:30">18:30</div>
                </div>
            </div>
        </div>

        <div class="form-section">
            <div class="form-header">Faça seu Agendamento</div>

            @using (Html.BeginForm("Enviar", "Agendamentos", FormMethod.Post))
            {
                @Html.AntiForgeryToken()

                <div class="form-group">
                    @Html.TextBoxFor(model => model.Nome, new { @class = "form-control", placeholder = "Nome", required = "required" })
                    @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", placeholder = "Email", type = "email", required = "required" })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.TextBoxFor(model => model.Telefone, new { @class = "form-control", placeholder = "Telefone", required = "required" })
                    @Html.ValidationMessageFor(model => model.Telefone, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <div class="specialty-dropdown">
                        <div class="specialty-select" id="specialty-display">Procedimento: Odontologia Geral</div>
                        <div class="specialty-options" id="specialty-options">
                            <div class="specialty-option" data-value="Ortodontia">Ortodontia</div>
                            <div class="specialty-option" data-value="Endodontia">Endodontia</div>
                            <div class="specialty-option" data-value="Periodontia">Periodontia</div>
                            <div class="specialty-option" data-value="Implantodontia">Implantodontia</div>
                            <div class="specialty-option" data-value="Odontopediatria">Odontopediatria</div>
                            <div class="specialty-option" data-value="CirurgiaBucomaxilofacial">Cirurgia Bucomaxilofacial</div>
                            <div class="specialty-option" data-value="ProteseDentaria">Prótese Dentária</div>
                            <div class="specialty-option" data-value="DentisticaEstetica">Dentística Estética</div>
                            <div class="specialty-option" data-value="RadiologiaOdontologica">Radiologia Odontológica</div>
                            <div class="specialty-option" data-value="Odontogeriatria">Odontogeriatria</div>
                        </div>
                        @Html.HiddenFor(model => model.Especialidade, new { id = "Especialidade" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Especialidade, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.TextBoxFor(model => model.DataHora, new { @class = "form-control", @readonly = "readonly", required = "required", style = "cursor: not-allowed; background-color: #1e1e1e;" })
                    @Html.ValidationMessageFor(model => model.DataHora, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.TextAreaFor(model => model.Mensagem, new { @class = "form-control", placeholder = "Mensagem (opcional)" })
                    @Html.ValidationMessageFor(model => model.Mensagem, "", new { @class = "text-danger" })
                </div>

                <button type="submit" class="submit-btn">Confirmar</button>
            }

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert-success">
                    @TempData["SuccessMessage"]
                </div>
            }
        </div>
    </div>

    <script>
        // JavaScript para gerenciar o calendário e a seleção de data/hora
        const prevMonthBtn = document.getElementById('prev-month');
        const nextMonthBtn = document.getElementById('next-month');
        const currentMonthDisplay = document.getElementById('current-month');
        const calendarGrid = document.getElementById('calendar-grid');
        const timeSlotsGrid = document.querySelector('.time-slots-grid');
        const dataHoraInput = document.getElementById('DataHora');

        let currentDate = new Date();
        let selectedDate = null;
        let selectedTime = null;

        // Gerenciamento do dropdown de especialidades
        const specialtyDisplay = document.getElementById('specialty-display');
        const specialtyOptions = document.getElementById('specialty-options');
        const specialtyInput = document.getElementById('Especialidade');
        const specialtyOptionElements = document.querySelectorAll('.specialty-option');

        specialtyDisplay.addEventListener('click', () => {
            specialtyOptions.classList.toggle('show');
        });

        // Fechar o dropdown quando clicar fora dele
        document.addEventListener('click', (e) => {
            if (!specialtyDisplay.contains(e.target) && !specialtyOptions.contains(e.target)) {
                specialtyOptions.classList.remove('show');
            }
        });

        specialtyOptionElements.forEach(option => {
            option.addEventListener('click', () => {
                const value = option.getAttribute('data-value');
                const text = option.textContent;
                specialtyDisplay.textContent = 'Procedimento: ' + text;
                specialtyInput.value = value;
                specialtyOptions.classList.remove('show');
            });
        });

        const updateCalendar = () => {
            // Get the current month and year
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();

            // Display the current month
            const months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];
            currentMonthDisplay.textContent = `${months[month]} ${year}`;

            // Clear previous calendar grid
            calendarGrid.innerHTML = '';

            // Get the first day of the month
            const firstDay = new Date(year, month, 1).getDay();
            const lastDate = new Date(year, month + 1, 0).getDate();
            const today = new Date();

            // Generate calendar days
            for (let i = 0; i < firstDay; i++) {
                const emptyCell = document.createElement('div');
                emptyCell.classList.add('calendar-day', 'inactive');
                calendarGrid.appendChild(emptyCell);
            }

            for (let day = 1; day <= lastDate; day++) {
                const dayCell = document.createElement('div');
                dayCell.textContent = day;
                dayCell.classList.add('calendar-day');

                const dayDate = new Date(year, month, day);

                // Mark weekends
                if (dayDate.getDay() === 0 || dayDate.getDay() === 6) {
                    dayCell.classList.add('weekend');
                }
                // Mark past dates
                else if (dayDate < today) {
                    dayCell.classList.add('past');
                }
                // Make clickable only for weekdays and future dates
                else {
                    dayCell.addEventListener('click', () => selectDate(year, month, day));
                }

                calendarGrid.appendChild(dayCell);
            }
        };

        const selectDate = (year, month, day) => {
            selectedDate = new Date(year, month, day);
            document.querySelectorAll('.calendar-day').forEach(dayCell => {
                dayCell.classList.remove('selected');
            });

            // Find the day cell that was selected and add the 'selected' class
            const dayCells = document.querySelectorAll('.calendar-day');
            for (let i = 0; i < dayCells.length; i++) {
                if (parseInt(dayCells[i].textContent) === day && !dayCells[i].classList.contains('inactive') && !dayCells[i].classList.contains('weekend') && !dayCells[i].classList.contains('past')) {
                    dayCells[i].classList.add('selected');
                    break;
                }
            }

            updateDataHoraInput();
        };

        // Time slot selection
        const timeSlots = document.querySelectorAll('.time-slot');
        timeSlots.forEach(slot => {
            slot.addEventListener('click', () => {
                timeSlots.forEach(s => s.classList.remove('selected'));
                slot.classList.add('selected');
                selectedTime = slot.getAttribute('data-time');
                updateDataHoraInput();
            });
        });

        const updateDataHoraInput = () => {
            if (selectedDate && selectedTime) {
                const day = selectedDate.getDate();
                const month = selectedDate.getMonth() + 1;
                const year = selectedDate.getFullYear();
                dataHoraInput.value = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year} - ${selectedTime}`;
            }
        };

        prevMonthBtn.addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() - 1);
            updateCalendar();
        });

        nextMonthBtn.addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() + 1);
            updateCalendar();
        });

        // Iniciar o calendário com o mês atual
        updateCalendar();
    </script>
</body>
</html>