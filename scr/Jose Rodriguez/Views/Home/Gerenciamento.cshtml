@model LoginCadastroMVC.Models.Patient
@{
    ViewBag.Title = "Gerenciamento";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    :root {
        --primary: #C6A16F;
        --secondary: #f5f5f5;
        --text-dark: #f0f0f0;
        --text-light: #aaa;
        --border-color: #444;
        --background-black: #121212;
    }

    body {
        font-family: 'Segoe UI', Arial, sans-serif;
        background-color: var(--background-black);
        margin: 0;
        padding: 0;
        color: var(--text-dark);
    }

    .appointment-container {
        display: flex;
        max-width: 1000px;
        margin: 20px auto;
        background-color: var(--background-black);
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
        overflow: hidden;
    }

    /* Calendar Section */
    .calendar-section {
        width: 45%;
        background-color: white;
        color: black;
        padding: 20px;
    }

    .month-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .month-nav button {
        background: none;
        border: none;
        color: black;
        cursor: pointer;
        font-size: 18px;
    }

    .month-header {
        text-align: center;
        padding: 10px 0;
        font-weight: bold;
        font-size: 18px;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        margin-bottom: 10px;
    }

    .days-header {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        text-align: center;
        font-size: 12px;
        margin-bottom: 10px;
    }

    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 5px;
    }

    .calendar-day {
        aspect-ratio: 1/1;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 14px;
        border-radius: 5px;
        cursor: pointer;
        background-color: #f0f0f0;
    }

    .calendar-day.inactive {
        color: rgba(0, 0, 0, 0.3);
        cursor: default;
        background-color: #f8f8f8;
    }

    .calendar-day.weekend {
        color: rgba(0, 0, 0, 0.3);
        cursor: not-allowed;
        position: relative;
    }

    .calendar-day.weekend::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 0, 0, 0.1);
        border-radius: 5px;
        pointer-events: none;
    }

    .calendar-day.past {
        color: rgba(0, 0, 0, 0.3);
        cursor: not-allowed;
        position: relative;
    }

    .calendar-day.past::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 0, 0, 0.1);
        border-radius: 5px;
        pointer-events: none;
    }

    .calendar-day.selected {
        background-color: var(--primary);
        color: white;
    }

    .time-slots {
        margin-top: 20px;
    }

    .time-slots-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .time-slots-info {
        font-size: 12px;
        color: rgba(0, 0, 0, 0.7);
    }

    .time-slots-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 10px;
        margin-top: 10px;
    }

    .time-slot {
        background-color: #f0f0f0;
        padding: 5px;
        text-align: center;
        border-radius: 5px;
        font-size: 12px;
        cursor: pointer;
    }

    .time-slot.selected {
        background-color: var(--primary);
        color: white;
    }

    .time-slot:hover {
        background-color: #e0e0e0;
    }

    /* Form Section */
    .form-section {
        width: 55%;
        padding: 20px;
        background-color: var(--background-black);
    }

    .form-header {
        text-align: center;
        font-size: 22px;
        color: var(--text-dark);
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid var(--border-color);
        border-radius: 5px;
        font-size: 14px;
        background-color: #1e1e1e;
        color: var(--text-dark);
    }

    textarea.form-control {
        resize: vertical;
        min-height: 80px;
    }

    .select-wrapper {
        position: relative;
        margin-bottom: 15px;
    }

    .specialty-select {
        width: 100%;
        padding: 10px;
        border: 1px solid var(--border-color);
        border-radius: 5px;
        background-color: #1e1e1e;
        color: var(--text-dark);
        position: relative;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .specialty-select:after {
        content: "▼";
        font-size: 12px;
        color: var(--text-light);
    }

    .specialty-options {
        position: absolute;
        width: 100%;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease;
        background-color: #1e1e1e;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.5);
        z-index: 10;
    }

    .specialty-options.show {
        max-height: 200px;
        overflow-y: auto;
        border: 1px solid var(--border-color);
    }

    .specialty-option {
        padding: 10px 12px;
        cursor: pointer;
        color: var(--text-dark);
    }

    .specialty-option:hover {
        background-color: #2c2c2c;
    }

    .submit-btn {
        width: 100%;
        background-color: var(--primary);
        color: white;
        border: none;
        padding: 12px;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        margin-top: 15px;
    }

    .text-danger {
        color: #C6A16F;
        font-size: 12px;
        margin-top: 4px;
        display: block;
    }

    .alert-success {
        background-color: #2c2c2c;
        color: #C6A16F;
        padding: 12px;
        border-radius: 5px;
        margin-top: 20px;
    }


        .calendar-section, .form-section {
            width: 100%;
        }
    }
</style>

<div class="appointment-container">
    <div class="calendar-section">
        <div class="month-nav">
            <button id="prev-month">&lt;</button>
            <div class="month-header" id="current-month">Abril 2025</div>
            <button id="next-month">&gt;</button>
        </div>
        <div class="days-header">
            <div>Dom</div>
            <div>Seg</div>
            <div>Ter</div>
            <div>Qua</div>
            <div>Qui</div>
            <div>Sex</div>
            <div>Sáb</div>
        </div>
        <div class="calendar-grid" id="calendar-grid">
            <!-- Calendar days will be generated by JavaScript -->
        </div>

        <div class="time-slots">
            <div class="time-slots-header">
                <div>Horários Disponíveis:</div>
                <div class="time-slots-info">10h às 19h (Seg-Sex)</div>
            </div>
            <div class="time-slots-grid">
                <div class="time-slot" data-time="10:00">10:00</div>
                <div class="time-slot" data-time="10:30">10:30</div>
                <div class="time-slot" data-time="11:00">11:00</div>
                <div class="time-slot" data-time="11:30">11:30</div>
                <div class="time-slot" data-time="12:00">12:00</div>
                <div class="time-slot" data-time="13:30">13:30</div>
                <div class="time-slot" data-time="14:00">14:00</div>
                <div class="time-slot" data-time="14:30">14:30</div>
                <div class="time-slot" data-time="15:00">15:00</div>
                <div class="time-slot" data-time="15:30">15:30</div>
                <div class="time-slot" data-time="16:00">16:00</div>
                <div class="time-slot" data-time="16:30">16:30</div>
                <div class="time-slot" data-time="17:00">17:00</div>
                <div class="time-slot" data-time="17:30">17:30</div>
                <div class="time-slot" data-time="18:00">18:00</div>
                <div class="time-slot" data-time="18:30">18:30</div>
            </div>
        </div>
    </div>

    <div class="form-section">
        <div class="form-header">Gerenciamento</div>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="select-wrapper">
                <div class="specialty-select" id="specialty-dropdown">
                    <span id="selected-specialty-text">Paciente: escolha o paciente... </span>
                </div>
                <div class="specialty-options" id="specialty-options">
                    <div class="specialty-option" data-value="Ortodontia">Luiz Fernando</div>
                    <div class="specialty-option" data-value="Endodontia">Carla Perez</div>
                    <div class="specialty-option" data-value="Periodontia">Bolsonaro</div>
                    <div class="specialty-option" data-value="Implantodontia">Airton Senna</div>
                    <div class="specialty-option" data-value="Odontopediatria">Raphael Cabral</div>
                    <div class="specialty-option" data-value="CirurgiaBucomaxilofacial">Isabela Pereira</div>
                    <div class="specialty-option" data-value="ProteseDentaria">Luiza Mel</div>
                    <div class="specialty-option" data-value="DentisticaEstetica">Arthur Oliveira</div>
                    <div class="specialty-option" data-value="RadiologiaOdontologica">Renata Incrata</div>
                    <div class="specialty-option" data-value="Odontogeriatria">João Gomes</div>
                </div>
                @Html.HiddenFor(model => model.SpecialtiesString, new { id = "SelectedSpecialty", Value = "Ortodontia" })
                @Html.ValidationMessageFor(model => model.Specialties, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control", placeholder = "Nome" })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.TextBoxFor(model => model.DateOfBirth,
                         new { @class = "form-control", placeholder = "Data de Nascimento", type = "date" })
                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.TextBoxFor(model => model.Address, new { @class = "form-control", placeholder = "Endereço" })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.TextBoxFor(model => model.Email, new { @class = "form-control", placeholder = "E-mail" })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.TextBoxFor(model => model.Phone, new { @class = "form-control", placeholder = "Telefone" })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.TextAreaFor(model => model.Complaint, new { @class = "form-control", placeholder = "Descreva sua queixa ou motivo da consulta" })
                @Html.ValidationMessageFor(model => model.Complaint, "", new { @class = "text-danger" })
            </div>

           

            <!-- Hidden fields to store the selected date and time -->
            @Html.HiddenFor(model => model.AppointmentDate, new { id = "AppointmentDate", Value = DateTime.Now.ToString("yyyy-MM-dd") })
            @Html.HiddenFor(model => model.AppointmentTime, new { id = "AppointmentTime", Value = "10:00" })
            @Html.HiddenFor(model => model.DateOfBirth, new { Value = DateTime.Now.AddYears(-30).ToString("yyyy-MM-dd") })

            <button type="submit" class="submit-btn">Editar</button>
            <button type="submit" class="submit-btn">Deletar</button>
            <button type="submit" class="submit-btn">Salvar</button>
        }

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert-success">
                @TempData["SuccessMessage"]
            </div>
        }
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Definições iniciais
        const today = new Date();
        let currentMonth = today.getMonth(); // Mês atual (0-indexed)
        let currentYear = today.getFullYear();
        const minDate = new Date(today.getFullYear(), today.getMonth(), today.getDate()); // Data atual como mínimo

        // Elementos do DOM
        const calendarGrid = document.getElementById('calendar-grid');
        const currentMonthElement = document.getElementById('current-month');
        const prevMonthButton = document.getElementById('prev-month');
        const nextMonthButton = document.getElementById('next-month');
        const appointmentDateField = document.getElementById('AppointmentDate');
        const appointmentTimeField = document.getElementById('AppointmentTime');
        const selectedSpecialtyField = document.getElementById('SelectedSpecialty');

        // Array de nomes dos meses em português
        const monthNames = [
            'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
            'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
        ];

        // Função para gerar o calendário
        function generateCalendar(month, year) {
            // Limpar grade do calendário
            calendarGrid.innerHTML = '';

            // Atualizar texto do mês e ano
            currentMonthElement.textContent = `${monthNames[month]} ${year}`;

            // Primeiro dia do mês
            const firstDay = new Date(year, month, 1);
            // Último dia do mês
            const lastDay = new Date(year, month + 1, 0);

            // Dia da semana do primeiro dia (0 = Domingo, 1 = Segunda, etc.)
            const firstDayIndex = firstDay.getDay();

            // Dias do mês anterior para preencher o início do calendário
            const prevMonthLastDay = new Date(year, month, 0).getDate();
            for (let i = firstDayIndex - 1; i >= 0; i--) {
                const dayElement = document.createElement('div');
                dayElement.textContent = prevMonthLastDay - i;
                dayElement.classList.add('calendar-day', 'inactive');
                calendarGrid.appendChild(dayElement);
            }

            // Dias do mês atual
            for (let day = 1; day <= lastDay.getDate(); day++) {
                const dayElement = document.createElement('div');
                dayElement.textContent = day;
                dayElement.classList.add('calendar-day');

                // Verificar se é fim de semana (0 = Domingo, 6 = Sábado)
                const dayOfWeek = new Date(year, month, day).getDay();
                if (dayOfWeek === 0 || dayOfWeek === 6) {
                    dayElement.classList.add('weekend');
                } else {
                    // Verificar se é uma data passada
                    const currentDateObj = new Date(year, month, day);
                    if (currentDateObj < minDate) {
                        dayElement.classList.add('past');
                    } else {
                        // Adicionar event listener apenas para dias válidos
                        dayElement.addEventListener('click', function() {
                            // Remover classe selecionada de todos os dias
                            document.querySelectorAll('.calendar-day').forEach(d => d.classList.remove('selected'));
                            // Adicionar classe selecionada ao dia clicado
                            this.classList.add('selected');

                            // Atualizar o campo de data escondido (formato YYYY-MM-DD)
                            const selectedDay = this.textContent.padStart(2, '0');
                            const selectedMonth = (month + 1).toString().padStart(2, '0');
                            appointmentDateField.value = `${year}-${selectedMonth}-${selectedDay}`;

                            console.log(`Data selecionada: ${appointmentDateField.value}`);
                        });
                    }
                }

                // Se for hoje, adiciona classe selecionada por padrão
                const isToday = day === today.getDate() && month === today.getMonth() && year === today.getFullYear();
                if (isToday) {
                    dayElement.classList.add('selected');
                    // Configura a data inicial
                    const todayFormatted = `${year}-${(month + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
                    appointmentDateField.value = todayFormatted;
                }

                calendarGrid.appendChild(dayElement);
            }

            // Dias do próximo mês para preencher o final do calendário
            const daysAfterMonthEnd = 42 - (firstDayIndex + lastDay.getDate()); // 42 = 6 linhas * 7 dias
            for (let i = 1; i <= daysAfterMonthEnd; i++) {
                const dayElement = document.createElement('div');
                dayElement.textContent = i;
                dayElement.classList.add('calendar-day', 'inactive');
                calendarGrid.appendChild(dayElement);
            }
        }

        // Gerar o calendário inicial
        generateCalendar(currentMonth, currentYear);

        // Event listeners para navegação do calendário
        prevMonthButton.addEventListener('click', function() {
            const prevDate = new Date(currentYear, currentMonth - 1, 1);

            // Verificar se a data é anterior à data mínima permitida
            if (prevDate < new Date(minDate.getFullYear(), minDate.getMonth(), 1)) {
                return;
            }

            currentMonth--;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            }
            generateCalendar(currentMonth, currentYear);
        });

        nextMonthButton.addEventListener('click', function() {
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            generateCalendar(currentMonth, currentYear);
        });

        // Time slot selection
        const timeSlots = document.querySelectorAll('.time-slot');
        timeSlots.forEach(slot => {
            slot.addEventListener('click', function() {
                // Remove selected class from all time slots
                timeSlots.forEach(s => s.classList.remove('selected'));
                // Add selected class to clicked time slot
                this.classList.add('selected');

                // Set the selected time in hidden field
                const selectedTime = this.getAttribute('data-time');
                appointmentTimeField.value = selectedTime;

                console.log(`Horário selecionado: ${appointmentTimeField.value}`);
            });
        });

        // Specialty dropdown
        const specialtyDropdown = document.getElementById('specialty-dropdown');
        const specialtyOptions = document.getElementById('specialty-options');
        const specialtyOptionItems = document.querySelectorAll('.specialty-option');
        const selectedSpecialtyText = document.getElementById('selected-specialty-text');

        // Toggle dropdown on click
        specialtyDropdown.addEventListener('click', function() {
            specialtyOptions.classList.toggle('show');
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            if (!specialtyDropdown.contains(event.target) && !specialtyOptions.contains(event.target)) {
                specialtyOptions.classList.remove('show');
            }
        });

        // Handle option selection
        specialtyOptionItems.forEach(option => {
            option.addEventListener('click', function() {
                const value = this.getAttribute('data-value');
                const displayText = this.textContent;
                selectedSpecialtyText.textContent = 'Procedimento: ' + displayText;
                selectedSpecialtyField.value = value;
                specialtyOptions.classList.remove('show');

                console.log(`Especialidade selecionada: ${selectedSpecialtyField.value}`);
            });
        });

        // Set a default time when the page loads
        document.getElementById('AppointmentTime').value = '10:00';
        document.querySelector('.time-slot[data-time="10:00"]').classList.add('selected');

        // Form submission debugging
        document.querySelector('form').addEventListener('submit', function(e) {
            console.log('Formulário sendo enviado com os seguintes dados:');
            console.log({
                name: document.querySelector('[name="Name"]').value,
                address: document.querySelector('[name="Address"]').value,
                email: document.querySelector('[name="Email"]').value,
                phone: document.querySelector('[name="Phone"]').value,
                complaint: document.querySelector('[name="Complaint"]').value,
                date: document.getElementById('AppointmentDate').value,
                time: document.getElementById('AppointmentTime').value,
                specialty: document.getElementById('SelectedSpecialty').value,
                dateOfBirth: document.querySelector('[name="DateOfBirth"]').value
            });
        });
    });
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}