@model LoginCadastroMVC.Models.Patient
@{
    ViewBag.Title = "Gerenciamento de Agendamentos";
    Layout = null;
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciamento de Agendamentos</title>
    <style>
        :root {
            --primary: #C6A16F;
            --secondary: #f5f5f5;
            --text-dark: #f0f0f0;
            --text-light: #aaa;
            --border-color: #444;
            --background-black: #121212;
            --success: #4CAF50;
            --danger: #f44336;
            --warning: #ff9800;
        }

        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            background-color: var(--background-black);
            margin: 0;
            padding: 0;
            color: var(--text-dark);
        }

        .management-container {
            display: flex;
            max-width: 1400px;
            margin: 20px auto;
            background-color: var(--background-black);
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
            overflow: hidden;
        }

        /* Calendar Section */
        .calendar-section {
            width: 40%;
            background-color: white;
            color: black;
            padding: 20px;
        }

        .month-nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .month-nav button {
            background: none;
            border: none;
            color: black;
            cursor: pointer;
            font-size: 18px;
            padding: 5px 10px;
            border-radius: 5px;
        }

        .month-nav button:hover {
            background-color: #f0f0f0;
        }

        .month-header {
            text-align: center;
            padding: 10px 0;
            font-weight: bold;
            font-size: 18px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            margin-bottom: 10px;
        }

        .days-header {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            text-align: center;
            font-size: 12px;
            margin-bottom: 10px;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }

        .calendar-day {
            aspect-ratio: 1/1;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            border-radius: 5px;
            cursor: pointer;
            background-color: #f0f0f0;
            position: relative;
        }

        .calendar-day.inactive {
            color: rgba(0, 0, 0, 0.3);
            cursor: default;
            background-color: #f8f8f8;
        }

        .calendar-day.weekend {
            color: rgba(0, 0, 0, 0.3);
            cursor: not-allowed;
            background-color: #ffe6e6;
        }

        .calendar-day.past {
            color: rgba(0, 0, 0, 0.3);
            cursor: not-allowed;
            background-color: #ffe6e6;
        }

        .calendar-day.selected {
            background-color: var(--primary);
            color: white;
        }

        .calendar-day.has-appointments::after {
            content: "●";
            position: absolute;
            bottom: 2px;
            right: 2px;
            color: #2196F3;
            font-size: 12px;
        }

        /* Appointments Section */
        .appointments-section {
            width: 60%;
            padding: 20px;
            background-color: var(--background-black);
            display: flex;
            flex-direction: column;
        }

        .appointments-header {
            text-align: center;
            font-size: 22px;
            color: var(--text-dark);
            margin-bottom: 20px;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 10px;
        }

        .selected-date-info {
            background-color: #1e1e1e;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 20px;
            text-align: center;
            color: var(--primary);
        }

        .appointments-list {
            flex: 1;
            overflow-y: auto;
            max-height: 600px;
        }

        .appointment-card {
            background-color: #1e1e1e;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            border-left: 4px solid var(--primary);
        }

        .appointment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .appointment-time {
            font-size: 18px;
            font-weight: bold;
            color: var(--primary);
        }

        .appointment-name {
            font-size: 16px;
            font-weight: bold;
            color: var(--text-dark);
        }

        .appointment-details {
            display: none;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid var(--border-color);
        }

        .appointment-details.show {
            display: block;
        }

        .detail-row {
            display: flex;
            margin-bottom: 8px;
        }

        .detail-label {
            font-weight: bold;
            width: 120px;
            color: var(--text-light);
        }

        .detail-value {
            flex: 1;
            color: var(--text-dark);
        }

        .appointment-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }

        .btn-confirm {
            background-color: var(--success);
            color: white;
        }

        .btn-confirm:hover {
            background-color: #45a049;
        }

        .btn-cancel {
            background-color: var(--danger);
            color: white;
        }

        .btn-cancel:hover {
            background-color: #da190b;
        }

        .btn-details {
            background-color: #2196F3;
            color: white;
        }

        .btn-details:hover {
            background-color: #1976D2;
        }

        .no-appointments {
            text-align: center;
            padding: 40px;
            color: var(--text-light);
            font-size: 16px;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: #1e1e1e;
            margin: 5% auto;
            padding: 20px;
            border-radius: 10px;
            width: 90%;
            max-width: 500px;
            color: var(--text-dark);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border-color);
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--text-light);
        }

        .alert {
            padding: 12px;
            border-radius: 5px;
            margin: 10px 0;
        }

        .alert-success {
            background-color: rgba(76, 175, 80, 0.1);
            color: var(--success);
            border: 1px solid var(--success);
        }

        .alert-danger {
            background-color: rgba(244, 67, 54, 0.1);
            color: var(--danger);
            border: 1px solid var(--danger);
        }

         @@media (max-width: 768px) {
        .management-container {
            flex-direction: column;
        }
        .calendar-section, .appointments-section {
            width: 100%;
        }
    }

    </style>
</head>
<body>
    <div class="management-container">
        <!-- Calendar Section -->
        <div class="calendar-section">
            <div class="month-nav">
                <button id="prev-month">&lt;</button>
                <div class="month-header" id="current-month">Maio 2025</div>
                <button id="next-month">&gt;</button>
            </div>
            <div class="days-header">
                <div>Dom</div>
                <div>Seg</div>
                <div>Ter</div>
                <div>Qua</div>
                <div>Qui</div>
                <div>Sex</div>
                <div>Sáb</div>
            </div>
            <div class="calendar-grid" id="calendar-grid">
                <!-- Calendar days will be generated by JavaScript -->
            </div>
        </div>

        <!-- Appointments Section -->
        <div class="appointments-section">
            <div class="appointments-header">Gerenciamento de Agendamentos</div>

            <div class="selected-date-info" id="selected-date-info">
                Selecione uma data para ver os agendamentos
            </div>

            <div class="appointments-list" id="appointments-list">
                <div class="no-appointments">
                    Selecione uma data no calendário para visualizar os agendamentos
                </div>
            </div>

            <div id="alerts-container"></div>
        </div>
    </div>

    <!-- Modal de Confirmação -->
    <div id="confirm-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h4 id="modal-title">Confirmação</h4>
                <button class="modal-close">&times;</button>
            </div>
            <div id="modal-body">
                <p id="modal-message"></p>
            </div>
            <div class="appointment-actions">
                <button id="modal-confirm" class="btn btn-confirm">Confirmar</button>
                <button id="modal-cancel" class="btn" style="background-color: #666;">Cancelar</button>
            </div>
        </div>
    </div>

    @Html.AntiForgeryToken()

    <script>
        // Variáveis globais
        let currentDate = new Date();
        let selectedDate = null;
        let currentAppointments = [];

        // Elementos do DOM
        const prevMonthBtn = document.getElementById('prev-month');
        const nextMonthBtn = document.getElementById('next-month');
        const currentMonthDisplay = document.getElementById('current-month');
        const calendarGrid = document.getElementById('calendar-grid');
        const selectedDateInfo = document.getElementById('selected-date-info');
        const appointmentsList = document.getElementById('appointments-list');
        const alertsContainer = document.getElementById('alerts-container');
        const confirmModal = document.getElementById('confirm-modal');
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        // Inicialização
        document.addEventListener('DOMContentLoaded', function() {
            updateCalendar();
            setupEventListeners();
        });

        // Event Listeners
        function setupEventListeners() {
            prevMonthBtn.addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() - 1);
                updateCalendar();
            });

            nextMonthBtn.addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() + 1);
                updateCalendar();
            });

            // Modal events
            document.querySelectorAll('.modal-close, #modal-cancel').forEach(btn => {
                btn.addEventListener('click', () => {
                    confirmModal.style.display = 'none';
                });
            });

            // Fechar modal clicando fora
            window.addEventListener('click', (e) => {
                if (e.target === confirmModal) {
                    confirmModal.style.display = 'none';
                }
            });
        }

        // Atualizar calendário
        function updateCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();

            // Atualizar cabeçalho
            const months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 
                           'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];
            currentMonthDisplay.textContent = `${months[month]} ${year}`;

            // Limpar grid
            calendarGrid.innerHTML = '';

            // Primeiro dia do mês e quantos dias tem
            const firstDay = new Date(year, month, 1).getDay();
            const lastDate = new Date(year, month + 1, 0).getDate();
            const today = new Date();

            // Células vazias no início
            for (let i = 0; i < firstDay; i++) {
                const emptyCell = document.createElement('div');
                emptyCell.classList.add('calendar-day', 'inactive');
                calendarGrid.appendChild(emptyCell);
            }

            // Dias do mês
            for (let day = 1; day <= lastDate; day++) {
                const dayCell = document.createElement('div');
                dayCell.textContent = day;
                dayCell.classList.add('calendar-day');

                const dayDate = new Date(year, month, day);

                // Marcar fins de semana
                if (dayDate.getDay() === 0 || dayDate.getDay() === 6) {
                    dayCell.classList.add('weekend');
                }
                // Marcar dias passados
                else if (dayDate < today) {
                    dayCell.classList.add('past');
                }
                // Dias clicáveis
                else {
                    dayCell.addEventListener('click', () => selectDate(year, month, day));
                }

                calendarGrid.appendChild(dayCell);
            }

            // Carregar indicadores de agendamentos para o mês
            loadMonthAppointments(month + 1, year);
        }

        // Selecionar data
        function selectDate(year, month, day) {
            selectedDate = new Date(year, month, day);

            // Remover seleção anterior
            document.querySelectorAll('.calendar-day').forEach(cell => {
                cell.classList.remove('selected');
            });

            // Adicionar seleção atual
            event.target.classList.add('selected');

            // Atualizar info da data selecionada
            const dateStr = selectedDate.toLocaleDateString('pt-BR');
            selectedDateInfo.textContent = `Agendamentos para ${dateStr}`;

            // Carregar agendamentos do dia
            loadDayAppointments();
        }

        // Carregar agendamentos do mês (para indicadores)
        async function loadMonthAppointments(month, year) {
            try {
                const response = await fetch(`/Agendamentos/GetAgendamentosPorData?data=01/${month.toString().padStart(2, '0')}/${year}`);
                // Aqui você pode implementar lógica para marcar dias com agendamentos
                // Por simplicidade, vamos carregar apenas quando uma data for selecionada
            } catch (error) {
                console.error('Erro ao carregar agendamentos do mês:', error);
            }
        }

        // Carregar agendamentos do dia
        async function loadDayAppointments() {
            if (!selectedDate) return;

            const day = selectedDate.getDate().toString().padStart(2, '0');
            const month = (selectedDate.getMonth() + 1).toString().padStart(2, '0');
            const year = selectedDate.getFullYear();
            const dateStr = `${day}/${month}/${year}`;

            try {
                const response = await fetch(`/Agendamentos/GetAgendamentosPorData?data=${dateStr}`);
                const appointments = await response.json();

                currentAppointments = appointments;
                displayAppointments(appointments);
            } catch (error) {
                console.error('Erro ao carregar agendamentos:', error);
                showAlert('Erro ao carregar agendamentos', 'danger');
            }
        }

        // Exibir agendamentos
        function displayAppointments(appointments) {
            appointmentsList.innerHTML = '';

            if (!appointments || appointments.length === 0) {
                appointmentsList.innerHTML = '<div class="no-appointments">Nenhum agendamento para esta data</div>';
                return;
            }

            appointments.forEach(appointment => {
                const appointmentCard = createAppointmentCard(appointment);
                appointmentsList.appendChild(appointmentCard);
            });
        }

        // Criar card de agendamento
        function createAppointmentCard(appointment) {
            const card = document.createElement('div');
            card.className = 'appointment-card';

            card.innerHTML = `
                <div class="appointment-header">
                    <div class="appointment-time">${appointment.hora}</div>
                    <div class="appointment-name">${appointment.nome}</div>
                </div>

                <div class="appointment-details" id="details-${appointment.id}">
                    <div class="detail-row">
                        <div class="detail-label">Email:</div>
                        <div class="detail-value">${appointment.email}</div>
                    </div>
                    <div class="detail-row">
                        <div class="detail-label">Telefone:</div>
                        <div class="detail-value">${appointment.telefone}</div>
                    </div>
                    <div class="detail-row">
                        <div class="detail-label">Procedimento:</div>
                        <div class="detail-value">${appointment.especialidade}</div>
                    </div>
                    ${appointment.mensagem ? `
                    <div class="detail-row">
                        <div class="detail-label">Mensagem:</div>
                        <div class="detail-value">${appointment.mensagem}</div>
                    </div>` : ''}
                </div>

                <div class="appointment-actions">
                    <button class="btn btn-details" onclick="toggleDetails(${appointment.id})">
                        Ver Detalhes
                    </button>
                    <button class="btn btn-confirm" onclick="confirmAppointment(${appointment.id}, '${appointment.nome}')">
                        Confirmar
                    </button>
                    <button class="btn btn-cancel" onclick="cancelAppointment(${appointment.id}, '${appointment.nome}')">
                        Cancelar
                    </button>
                </div>
            `;

            return card;
        }

        // Toggle detalhes
        function toggleDetails(appointmentId) {
            const details = document.getElementById(`details-${appointmentId}`);
            const button = event.target;

            if (details.classList.contains('show')) {
                details.classList.remove('show');
                button.textContent = 'Ver Detalhes';
            } else {
                details.classList.add('show');
                button.textContent = 'Ocultar Detalhes';
            }
        }

        // Confirmar agendamento
        function confirmAppointment(appointmentId, patientName) {
            showConfirmModal(
                'Confirmar Agendamento',
                `Deseja confirmar o agendamento de ${patientName}? O paciente será adicionado ao sistema e o agendamento será removido desta lista.`,
                () => processConfirmation(appointmentId)
            );
        }

        // Cancelar agendamento
        function cancelAppointment(appointmentId, patientName) {
            showConfirmModal(
                'Cancelar Agendamento',
                `Deseja cancelar o agendamento de ${patientName}? Esta ação não pode ser desfeita e o horário ficará disponível novamente.`,
                () => processCancellation(appointmentId)
            );
        }

        // Mostrar modal de confirmação
        function showConfirmModal(title, message, onConfirm) {
            document.getElementById('modal-title').textContent = title;
            document.getElementById('modal-message').textContent = message;

            const confirmBtn = document.getElementById('modal-confirm');
            confirmBtn.onclick = () => {
                confirmModal.style.display = 'none';
                onConfirm();
            };

            confirmModal.style.display = 'block';
        }

        // Processar confirmação
        async function processConfirmation(appointmentId) {
            try {
                const response = await fetch('/Agendamentos/ConfirmarAgendamento', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `id=${appointmentId}&__RequestVerificationToken=${token}`
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(result.message, 'success');
                    loadDayAppointments(); // Recarregar lista
                } else {
                    showAlert(result.message, 'danger');
                }
            } catch (error) {
                console.error('Erro ao confirmar agendamento:', error);
                showAlert('Erro ao confirmar agendamento', 'danger');
            }
        }

        // Processar cancelamento
        async function processCancellation(appointmentId) {
            try {
                const response = await fetch('/Agendamentos/CancelarAgendamento', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `id=${appointmentId}&__RequestVerificationToken=${token}`
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(result.message, 'success');
                    loadDayAppointments(); // Recarregar lista
                } else {
                    showAlert(result.message, 'danger');
                }
            } catch (error) {
                console.error('Erro ao cancelar agendamento:', error);
                showAlert('Erro ao cancelar agendamento', 'danger');
            }
        }

        // Mostrar alerta
        function showAlert(message, type) {
            alertsContainer.innerHTML = `
                <div class="alert alert-${type}">
                    ${message}
                </div>
            `;

            // Remover alerta após 5 segundos
            setTimeout(() => {
                alertsContainer.innerHTML = '';
            }, 5000);
        }
    </script>
</body>
</html>