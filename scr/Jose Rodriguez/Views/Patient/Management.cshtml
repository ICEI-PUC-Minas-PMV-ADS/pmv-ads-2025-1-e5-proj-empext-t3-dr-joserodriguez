@model List<LoginCadastroMVC.Models.Patient>
@{
    ViewBag.Title = "Gerenciamento de Pacientes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="management-container">
    <div class="calendar-section">
        <div class="month-nav">
            <button id="prev-month">&lt;</button>
            <div class="month-header" id="current-month">Abril 2025</div>
            <button id="next-month">&gt;</button>
        </div>
        <div class="days-header">
            <div>Dom</div>
            <div>Seg</div>
            <div>Ter</div>
            <div>Qua</div>
            <div>Qui</div>
            <div>Sex</div>
            <div>Sáb</div>
        </div>
        <div class="calendar-grid" id="calendar-grid">
            <!-- Calendar days will be generated by JavaScript -->
        </div>

        <div class="time-slots">
            <div class="time-slots-header">
                <div>Horários Agendados:</div>
                <div class="time-slots-info" id="selected-date-info">Selecione uma data</div>
            </div>
            <div class="time-slots-grid" id="time-slots-grid">
                <!-- Time slots will be populated based on selected date -->
            </div>
        </div>
    </div>

    <div class="management-section">
        <div class="management-header">Gerenciamento</div>
        
        <div class="patient-dropdown">
            <div class="patient-select" id="patient-dropdown">
                <span id="selected-patient-text">Paciente</span>
            </div>
            <div class="patient-options" id="patient-options">
                <!-- Patient options will be populated from selected date -->
            </div>
        </div>

        <form id="patient-form" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" id="PatientID" name="ID" value="" />
            
            <div class="form-group">
                <input type="text" id="Name" name="Name" class="form-control" placeholder="Nome Completo" />
            </div>
            
            <div class="form-group">
                <input type="text" id="Address" name="Address" class="form-control" placeholder="Endereço" />
            </div>
            
            <div class="form-group">
                <input type="email" id="Email" name="Email" class="form-control" placeholder="E-mail" />
            </div>
            
            <div class="form-group">
                <input type="tel" id="Phone" name="Phone" class="form-control" placeholder="Telefone" />
            </div>
            
            <div class="form-group">
                <input type="text" id="Procedure" name="SpecialtiesString" class="form-control" placeholder="Procedimento" />
            </div>
            
            <div class="form-group">
                <textarea id="Complaint" name="Complaint" class="form-control" placeholder="Descrição"></textarea>
            </div>
            
            <div class="btn-group">
                <button type="button" id="save-btn" class="btn btn-save">Salvar</button>
            </div>
            <button type="button" id="edit-btn" class="btn btn-edit">Editar</button>
            <button type="button" id="delete-btn" class="btn btn-delete">Excluir</button>
        </form>
        
        <div id="no-patient-selected" class="no-patients">
            Selecione uma data e um paciente para gerenciar
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initial state
        const today = new Date();
        let currentMonth = today.getMonth();
        let currentYear = today.getFullYear();
        let selectedDate = null;
        let selectedPatientId = null;
        
        // DOM elements
        const calendarGrid = document.getElementById('calendar-grid');
        const currentMonthElement = document.getElementById('current-month');
        const prevMonthButton = document.getElementById('prev-month');
        const nextMonthButton = document.getElementById('next-month');
        const selectedDateInfo = document.getElementById('selected-date-info');
        const timeSlotsGrid = document.getElementById('time-slots-grid');
        const patientDropdown = document.getElementById('patient-dropdown');
        const patientOptions = document.getElementById('patient-options');
        const selectedPatientText = document.getElementById('selected-patient-text');
        const patientForm = document.getElementById('patient-form');
        const noPatientSelected = document.getElementById('no-patient-selected');
        
        // Form buttons
        const saveBtn = document.getElementById('save-btn');
        const editBtn = document.getElementById('edit-btn');
        const deleteBtn = document.getElementById('delete-btn');
        
        // Month names
        const monthNames = [
            'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
            'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
        ];
        
        // Initial setup
        generateCalendar(currentMonth, currentYear);
        hidePatientForm();
        
        // Generate calendar
        function generateCalendar(month, year) {
            calendarGrid.innerHTML = '';
            currentMonthElement.textContent = `${monthNames[month]} ${year}`;
            
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const firstDayIndex = firstDay.getDay();
            
            // Days from previous month
            const prevMonthLastDay = new Date(year, month, 0).getDate();
            for (let i = firstDayIndex - 1; i >= 0; i--) {
                const dayElement = document.createElement('div');
                dayElement.textContent = prevMonthLastDay - i;
                dayElement.classList.add('calendar-day', 'inactive');
                calendarGrid.appendChild(dayElement);
            }
            
            // Current month days
            for (let day = 1; day <= lastDay.getDate(); day++) {
                const dayElement = document.createElement('div');
                dayElement.textContent = day;
                dayElement.classList.add('calendar-day');
                
                const dateObj = new Date(year, month, day);
                const dateString = formatDate(dateObj);
                dayElement.dataset.date = dateString;
                
                // Check if day has appointments (this would be replaced with actual data)
                // For demo purposes, let's assume some random days have appointments
                if (Math.random() > 0.7) {
                    dayElement.classList.add('has-appointments');
                }
                
                // Weekend check
                const dayOfWeek = dateObj.getDay();
                if (dayOfWeek === 0 || dayOfWeek === 6) {
                    dayElement.classList.add('weekend');
                }
                
                // Past day check
                if (dateObj < new Date(today.setHours(0, 0, 0, 0))) {
                    dayElement.classList.add('past');
                }
                
                // Click event
                dayElement.addEventListener('click', function() {
                    document.querySelectorAll('.calendar-day').forEach(d => d.classList.remove('selected'));
                    this.classList.add('selected');
                    selectedDate = this.dataset.date;
                    fetchAppointmentsForDate(selectedDate);
                });
                
                calendarGrid.appendChild(dayElement);
            }
            
            // Next month days
            const daysAfterMonthEnd = 42 - (firstDayIndex + lastDay.getDate());
            for (let i = 1; i <= daysAfterMonthEnd; i++) {
                const dayElement = document.createElement('div');
                dayElement.textContent = i;
                dayElement.classList.add('calendar-day', 'inactive');
                calendarGrid.appendChild(dayElement);
            }
        }
        
        // Format date to YYYY-MM-DD
        function formatDate(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }
        
        // Format date to display format (DD/MM/YYYY)
        function formatDisplayDate(dateString) {
            const [year, month, day] = dateString.split('-');
            return `${day}/${month}/${year}`;
        }
        
        // Fetch appointments for selected date
        function fetchAppointmentsForDate(date) {
            // This would be an AJAX call to your backend
            // For now, we'll simulate it with mock data
            selectedDateInfo.textContent = `Data: ${formatDisplayDate(date)}`;
            
            // Clear patient dropdown and form
            resetPatientSelection();

            // Fazer chamada real ao backend
            fetch(`/Patient/GetByDate?date=${selectedDate}`)
                .then(response => response.json())
                .then(appointments => {
                    populatePatientDropdown(appointments);
                    populateTimeSlots(appointments);
                })
                .catch(error => {
                    console.error('Erro ao buscar agendamentos:', error);
                });

        }
        
        // Populate patient dropdown
        function populatePatientDropdown(patients) {
            patientOptions.innerHTML = '';
            
            if (patients.length === 0) {
                const noPatients = document.createElement('div');
                noPatients.textContent = 'Nenhum paciente agendado para esta data';
                noPatients.classList.add('patient-option');
                patientOptions.appendChild(noPatients);
                return;
            }
            
            patients.forEach(patient => {
                const option = document.createElement('div');
                option.textContent = `${patient.name} - ${patient.time}`;
                option.classList.add('patient-option');
                option.dataset.id = patient.id;
                option.addEventListener('click', function() {
                    selectedPatientId = this.dataset.id;
                    selectedPatientText.textContent = this.textContent;
                    patientOptions.classList.remove('show');
                    fetchPatientDetails(selectedPatientId);
                });
                patientOptions.appendChild(option);
            });
        }
        
        // Populate time slots
        function populateTimeSlots(appointments) {
            timeSlotsGrid.innerHTML = '';
            
            if (appointments.length === 0) {
                const noAppointments = document.createElement('div');
                noAppointments.textContent = 'Nenhum agendamento para esta data';
                noAppointments.style.gridColumn = '1 / -1';
                noAppointments.style.textAlign = 'center';
                noAppointments.style.padding = '10px';
                timeSlotsGrid.appendChild(noAppointments);
                return;
            }
            
            appointments.forEach(appointment => {
                const timeSlot = document.createElement('div');
                timeSlot.textContent = `${appointment.time} - ${appointment.name}`;
                timeSlot.classList.add('time-slot');
                timeSlot.dataset.id = appointment.id;
                timeSlot.addEventListener('click', function() {
                    document.querySelectorAll('.time-slot').forEach(s => s.classList.remove('selected'));
                    this.classList.add('selected');
                    selectedPatientId = this.dataset.id;
                    
                    // Update dropdown text
                    selectedPatientText.textContent = this.textContent;
                    
                    // Fetch patient details
                    fetchPatientDetails(selectedPatientId);
                });
                timeSlotsGrid.appendChild(timeSlot);
            });
        }
        
        // Fetch patient details
        function fetchPatientDetails(patientId) {
            // This would be an AJAX call to your backend
            // For now, we'll simulate it with mock data
            setTimeout(() => {
                // Find the patient in our mock data
                const mockPatientDetails = {
                    id: patientId,
                    name: 'João Silva',
                    address: 'Rua das Flores, 123',
                    email: 'joao.silva@email.com',
                    phone: '(11) 98765-4321',
                    specialty: 'Ortodontia',
                    complaint: 'Dor no dente do siso'
                };
                
                // Populate form with patient details
                populatePatientForm(mockPatientDetails);
            }, 300);
        }
        
        // Populate patient form
        function populatePatientForm(patient) {
            document.getElementById('PatientID').value = patient.id;
            document.getElementById('Name').value = patient.name;
            document.getElementById('Address').value = patient.address;
            document.getElementById('Email').value = patient.email;
            document.getElementById('Phone').value = patient.phone;
            document.getElementById('Procedure').value = patient.specialty;
            document.getElementById('Complaint').value = patient.complaint;
            
            // Show form, hide message
            patientForm.style.display = 'block';
            noPatientSelected.style.display = 'none';
            
            // Disable form fields initially (view mode)
            setFormReadOnly(true);
        }
        
        // Reset patient selection
        function resetPatientSelection() {
            selectedPatientId = null;
            selectedPatientText.textContent = 'Paciente';
            hidePatientForm();
        }
        
        // Hide patient form
        function hidePatientForm() {
            patientForm.style.display = 'none';
            noPatientSelected.style.display = 'block';
        }
        
        // Set form read-only state
        function setFormReadOnly(isReadOnly) {
            const formElements = patientForm.querySelectorAll('input, textarea');
            formElements.forEach(el => {
                el.readOnly = isReadOnly;
                el.style.opacity = isReadOnly ? '0.8' : '1';
            });
            
            // Toggle button visibility
            saveBtn.style.display = isReadOnly ? 'none' : 'block';
            editBtn.style.display = isReadOnly ? 'block' : 'none';
        }
        
        // Event listeners for navigation
        prevMonthButton.addEventListener('click', function() {
            currentMonth--;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            }
            generateCalendar(currentMonth, currentYear);
            resetPatientSelection();
        });
        
        nextMonthButton.addEventListener('click', function() {
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            generateCalendar(currentMonth, currentYear);
            resetPatientSelection();
        });
        
        // Patient dropdown toggle
        patientDropdown.addEventListener('click', function() {
            patientOptions.classList.toggle('show');
        });
        
        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            if (!patientDropdown.contains(event.target) && !patientOptions.contains(event.target)) {
                patientOptions.classList.remove('show');
            }
        });
        
        // Save button event
        saveBtn.addEventListener('click', function() {
            // This would be an AJAX call to save the patient data
            const formData = new FormData(patientForm);
            const patientData = Object.fromEntries(formData.entries());
            
            console.log('Salvando dados do paciente:', patientData);
            
            // Simulate successful save
            alert('Dados do paciente salvos com sucesso!');
            
            // Return to read-only mode
            setFormReadOnly(true);
        });
        
        // Edit button event
        editBtn.addEventListener('click', function() {
            // Set form to editable mode
            setFormReadOnly(false);
        });
        
        // Delete button event
        deleteBtn.addEventListener('click', function() {
            if (confirm('Tem certeza que deseja excluir este agendamento?')) {
                // This would be an AJAX call to delete the patient
                console.log('Excluindo paciente ID:', selectedPatientId);
                
                // Simulate successful delete
                alert('Agendamento excluído com sucesso!');
                
                // Refresh the appointments list
                if (selectedDate) {
                    fetchAppointmentsForDate(selectedDate);
                }
            }
        });
    });
</script>