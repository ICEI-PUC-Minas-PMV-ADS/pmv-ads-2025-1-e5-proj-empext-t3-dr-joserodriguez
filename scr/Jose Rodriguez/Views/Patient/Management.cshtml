@{
    ViewBag.Title = "Gerenciamento de Pacientes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /* Estilos principais */
    .management-container {
        display: flex;
        gap: 20px;
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }

    /* Seção do calendário */
    .calendar-section {
        flex: 1;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .calendar-nav {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .nav-btn {
        background: #f0f4f8;
        border: none;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
    }

        .nav-btn:hover {
            background: #e0e7ef;
        }

    #current-month {
        font-size: 18px;
        font-weight: 600;
    }

    .weekdays {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        text-align: center;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .weekday {
        padding: 8px;
        color: #555;
    }

    #calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 4px;
    }

    .day, .empty-day {
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
        cursor: pointer;
        position: relative;
    }

    .day {
        background-color: #f9f9f9;
    }

        .day:hover {
            background-color: #e9f0f7;
        }

        .day.active {
            background-color: #e3f2fd;
            font-weight: bold;
        }

        .day.today {
            border: 2px solid #1976d2;
        }

        .day.has-appointments::after {
            content: '';
            position: absolute;
            bottom: 5px;
            width: 6px;
            height: 6px;
            background-color: #1976d2;
            border-radius: 50%;
        }

    /* Seção de slots de tempo */
    .time-slots {
        margin-top: 20px;
        border-top: 1px solid #eee;
        padding-top: 15px;
    }

    .time-slots-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .time-slots-grid {
        max-height: 300px;
        overflow-y: auto;
        background-color: #f9f9f9;
        border-radius: 4px;
        padding: 10px;
    }

    .time-slot {
        padding: 8px 12px;
        margin-bottom: 5px;
        background-color: #e3f2fd;
        border-radius: 4px;
        display: flex;
        justify-content: space-between;
    }

        .time-slot:hover {
            background-color: #bbdefb;
        }

        .time-slot .time-slot-actions {
            display: none;
        }

        .time-slot:hover .time-slot-actions {
            display: flex;
            gap: 5px;
        }

    .time-slot-actions button {
        border: none;
        background: transparent;
        cursor: pointer;
        color: #555;
        font-size: 14px;
    }

        .time-slot-actions button:hover {
            color: #000;
        }

    .no-timeslot {
        padding: 15px;
        text-align: center;
        color: #666;
    }

    /* Seção de gerenciamento */
    .management-section {
        flex: 1;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
    }

    .management-header {
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

        .management-header h3 {
            margin: 0;
            color: #333;
        }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
    }

    .btn-group {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    .btn {
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        flex: 1;
    }

    .btn-save {
        background-color: #4caf50;
        color: white;
    }

    .btn-edit {
        background-color: #2196f3;
        color: white;
    }

    .btn-delete {
        background-color: #f44336;
        color: white;
    }

    .btn-cancel {
        background-color: #9e9e9e;
        color: white;
    }

    .no-patients {
        text-align: center;
        padding: 30px 0;
        color: #666;
    }

    /* Modal de reagendamento */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        background-color: #fff;
        margin: 10% auto;
        padding: 20px;
        border-radius: 8px;
        max-width: 500px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

        .modal-header h4 {
            margin: 0;
        }

    .modal-close {
        background: transparent;
        border: none;
        font-size: 20px;
        cursor: pointer;
    }

    .reschedule-form {
        margin-top: 15px;
    }

        .reschedule-form label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .reschedule-form input, .reschedule-form select {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }

        .modal-footer button {
            padding: 8px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

    .btn-confirm {
        background-color: #4caf50;
        color: white;
    }

    .btn-cancel-modal {
        background-color: #f5f5f5;
        color: #333;
    }
</style>

<div class="management-container">
    <!-- CALENDÁRIO -->
    <div class="calendar-section">
        <div class="calendar-header">
            <div class="calendar-nav">
                <button class="nav-btn" id="prev-month">&lt;</button>
                <span id="current-month" data-month="0" data-year="2023">Mês Ano</span>
                <button class="nav-btn" id="next-month">&gt;</button>
            </div>
        </div>

        <div class="weekdays">
            <div class="weekday">Dom</div>
            <div class="weekday">Seg</div>
            <div class="weekday">Ter</div>
            <div class="weekday">Qua</div>
            <div class="weekday">Qui</div>
            <div class="weekday">Sex</div>
            <div class="weekday">Sáb</div>
        </div>

        <div id="calendar-grid">
            <!-- Os dias do calendário serão gerados aqui -->
        </div>

        <div class="time-slots">
            <div class="time-slots-header">
                <strong>Horários Agendados:</strong>
                <div id="selected-date-info">Selecione uma data</div>
            </div>
            <div class="time-slots-grid" id="time-slots-grid">
                <div class="no-timeslot">Nenhum horário agendado.</div>
            </div>
        </div>
    </div>

    <!-- GERENCIAMENTO -->
    <div class="management-section">
        <div class="management-header"><h3>Gerenciamento de Consulta</h3></div>

        <form id="patient-form" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" id="PatientID" name="ID" />
            <input type="hidden" id="AppointmentDate" name="AppointmentDate" />
            <input type="hidden" id="AppointmentTime" name="AppointmentTime" />

            <div class="form-group">
                <input type="text" id="Name" name="Name" class="form-control" placeholder="Nome Completo" />
            </div>

            <div class="form-group">
                <input type="date" id="DateOfBirth" name="DateOfBirth" class="form-control" placeholder="Data de Nascimento" />
            </div>

            <div class="form-group">
                <input type="text" id="Address" name="Address" class="form-control" placeholder="Endereço" />
            </div>

            <div class="form-group">
                <input type="email" id="Email" name="Email" class="form-control" placeholder="E-mail" />
            </div>

            <div class="form-group">
                <input type="tel" id="Phone" name="Phone" class="form-control" placeholder="Telefone" />
            </div>

            <div class="form-group">
                <select id="Procedure" name="SpecialtiesString" class="form-control">
                    <option value="">Selecione um Procedimento</option>
                    @foreach (var specialty in Enum.GetValues(typeof(LoginCadastroMVC.Models.SpecialtyEnum)).Cast<LoginCadastroMVC.Models.SpecialtyEnum>())
                    {
                        <option value="@specialty.ToString()">@specialty</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <textarea id="Complaint" name="Complaint" class="form-control" placeholder="Descrição"></textarea>
            </div>

            <div class="btn-group">
                <button type="button" id="save-btn" class="btn btn-save">Salvar</button>
                <button type="button" id="reschedule-btn" class="btn btn-edit">Reagendar</button>
                <button type="button" id="delete-btn" class="btn btn-delete">Excluir</button>
                <button type="button" id="cancel-btn" class="btn btn-cancel" style="display:none;">Cancelar</button>
            </div>
        </form>

        <div id="no-patient-selected" class="no-patients">
            Selecione uma data e um paciente para gerenciar
        </div>
    </div>
</div>

<!-- Modal de Reagendamento -->
<div id="reschedule-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h4>Reagendar Consulta</h4>
            <button class="modal-close">&times;</button>
        </div>
        <div class="reschedule-form">
            <label for="reschedule-date">Nova Data:</label>
            <input type="date" id="reschedule-date" class="form-control">

            <label for="reschedule-time">Novo Horário:</label>
            <input type="time" id="reschedule-time" class="form-control">
        </div>
        <div class="modal-footer">
            <button class="btn-cancel-modal">Cancelar</button>
            <button class="btn-confirm">Confirmar</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let appointmentsData = [];
            let selectedPatientId = null;
            let selectedDate = null;

            // Inicializar o calendário com o mês atual
            let today = new Date();
            let currentDate = today.toISOString().split('T')[0];

            updateHeader(today.getMonth(), today.getFullYear());
            loadCalendar(today.getMonth(), today.getFullYear());

            // Função para carregar todos os agendamentos do mês
            function loadMonthAppointments(month, year) {
                // Converter mês para o formato que seu backend espera (se necessário)
                const monthStr = (month + 1).toString().padStart(2, '0');
                const yearStr = year.toString();

                $.ajax({
                    url: '@Url.Action("GetByMonth", "Patient")',
                    data: { month: monthStr, year: yearStr },
                    success: function (data) {
                        appointmentsData = data;
                        markDaysWithAppointments();
                    },
                    error: function () {
                        console.error('Erro ao buscar agendamentos do mês');
                    }
                });
            }

            // Marcar dias que têm agendamentos
            function markDaysWithAppointments() {
                if (!appointmentsData || appointmentsData.length === 0) return;

                $('.day').each(function () {
                    const dayDate = $(this).data('date');
                    const hasAppointment = appointmentsData.some(a =>
                        a.appointmentDate.split('T')[0] === dayDate);

                    if (hasAppointment) {
                        $(this).addClass('has-appointments');
                    }
                });
            }

            // Carregar o calendário para um mês específico
            function loadCalendar(month, year) {
                const daysInMonth = new Date(year, month + 1, 0).getDate();
                const firstDay = new Date(year, month, 1).getDay();
                $('#calendar-grid').empty();

                // Adicionar dias vazios no início
                for (let i = 0; i < firstDay; i++) {
                    $('#calendar-grid').append('<div class="empty-day"></div>');
                }

                // Adicionar os dias do mês
                for (let day = 1; day <= daysInMonth; day++) {
                    const date = new Date(year, month, day);
                    const dateStr = date.toISOString().split('T')[0];
                    const isToday = dateStr === currentDate;

                    const dayDiv = $(`<div class="day ${isToday ? 'today' : ''}" data-date="${dateStr}">${day}</div>`);
                    $('#calendar-grid').append(dayDiv);
                }

                // Adicionar evento de clique aos dias
                $('.day').on('click', function () {
                    $('.day').removeClass('active');
                    $(this).addClass('active');

                    selectedDate = $(this).data('date');
                    const formattedDate = formatDate(selectedDate);
                    $('#selected-date-info').text('Horários agendados para: ' + formattedDate);
                    loadTimeSlots(selectedDate);
                });

                // Carregar agendamentos do mês
                loadMonthAppointments(month, year);
            }

            // Formatar data para exibição
            function formatDate(dateStr) {
                const date = new Date(dateStr);
                return date.toLocaleDateString('pt-BR');
            }

            // Carregar slots de horário para uma data específica
            function loadTimeSlots(date) {
                $.ajax({
                    url: '@Url.Action("GetByDate", "Patient")',
                    data: { date: date },
                    success: function (data) {
                        $('#time-slots-grid').empty();
                        if (data && data.length > 0) {
                            data.forEach(function (slot) {
                                const $slotDiv = $(`
                                            <div class="time-slot" data-id="${slot.id}">
                                                <span>${slot.appointmentTime} - ${slot.name}</span>
                                                <div class="time-slot-actions">
                                                    <button class="edit-slot" title="Editar"><i class="fas fa-edit"></i> Editar</button>
                                                    <button class="reschedule-slot" title="Reagendar"><i class="fas fa-calendar-alt"></i> Reagendar</button>
                                                    <button class="delete-slot" title="Excluir"><i class="fas fa-trash"></i> Excluir</button>
                                                </div>
                                            </div>
                                        `);

                                // Evento de clique para seleção
                                $slotDiv.on('click', function (e) {
                                    if (!$(e.target).closest('button').length) {
                                        selectPatient(slot);
                                    }
                                });

                                // Eventos para os botões
                                $slotDiv.find('.edit-slot').on('click', function (e) {
                                    e.stopPropagation();
                                    selectPatient(slot);
                                });

                                $slotDiv.find('.reschedule-slot').on('click', function (e) {
                                    e.stopPropagation();
                                    openRescheduleModal(slot);
                                });

                                $slotDiv.find('.delete-slot').on('click', function (e) {
                                    e.stopPropagation();
                                    if (confirm('Tem certeza que deseja excluir esta consulta?')) {
                                        deleteAppointment(slot.id);
                                    }
                                });

                                $('#time-slots-grid').append($slotDiv);
                            });
                        } else {
                            $('#time-slots-grid').append('<div class="no-timeslot">Nenhum horário agendado.</div>');
                        }
                    },
                    error: function () {
                        $('#time-slots-grid').html('<div class="no-timeslot">Erro ao buscar horários.</div>');
                    }
                });
            }

            // Selecionar um paciente para edição
            function selectPatient(patient) {
                selectedPatientId = patient.id;

                $('#PatientID').val(patient.id);
                $('#Name').val(patient.name);
                $('#Email').val(patient.email);
                $('#Phone').val(patient.phone);
                $('#Address').val(patient.address);
                $('#DateOfBirth').val(patient.dateOfBirth?.split('T')[0]);
                $('#Procedure').val(patient.specialtiesString || patient.procedure);
                $('#Complaint').val(patient.complaint);
                $('#AppointmentDate').val(patient.appointmentDate?.split('T')[0]);
                $('#AppointmentTime').val(patient.appointmentTime);

                $('#no-patient-selected').hide();
                $('#patient-form').show();
                $('#cancel-btn').show();
            }

            // Reagendar consulta
            function openRescheduleModal(patient) {
                selectedPatientId = patient.id;

                // Configurar valores iniciais
                const appointmentDate = patient.appointmentDate?.split('T')[0] || '';
                $('#reschedule-date').val(appointmentDate);
                $('#reschedule-time').val(patient.appointmentTime);

                // Mostrar modal
                $('#reschedule-modal').css('display', 'block');
            }

            // Fechar modal
            $('.modal-close, .btn-cancel-modal').on('click', function () {
                $('#reschedule-modal').css('display', 'none');
            });

            // Confirmar reagendamento
            $('.btn-confirm').on('click', function () {
                const newDate = $('#reschedule-date').val();
                const newTime = $('#reschedule-time').val();

                if (!newDate || !newTime) {
                    alert('Por favor, selecione data e horário.');
                    return;
                }

                rescheduleAppointment(selectedPatientId, newDate, newTime);
            });

            // Função de reagendamento
            function rescheduleAppointment(patientId, newDate, newTime) {
                $.ajax({
                    url: '@Url.Action("Reschedule", "Patient")',
                    type: 'POST',
                    data: {
                        id: patientId,
                        appointmentDate: newDate,
                        appointmentTime: newTime
                    },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (result) {
                        $('#reschedule-modal').css('display', 'none');

                        // Recarregar dados do calendário
                        const month = parseInt($('#current-month').data('month'));
                        const year = parseInt($('#current-month').data('year'));
                        loadMonthAppointments(month, year);

                        // Recarregar slots se estiver na mesma data
                        if (selectedDate) {
                            loadTimeSlots(selectedDate);
                        }

                        resetForm();
                        alert('Consulta reagendada com sucesso!');
                    },
                    error: function () {
                        alert('Erro ao reagendar consulta. Tente novamente.');
                    }
                });
            }

            // Excluir consulta
            function deleteAppointment(patientId) {
                $.ajax({
                    url: '@Url.Action("Delete", "Patient")',
                    type: 'POST',
                    data: { id: patientId },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (result) {
                        // Recarregar dados do calendário
                        const month = parseInt($('#current-month').data('month'));
                        const year = parseInt($('#current-month').data('year'));
                        loadMonthAppointments(month, year);

                        // Recarregar slots se estiver na mesma data
                        if (selectedDate) {
                            loadTimeSlots(selectedDate);
                        }

                        resetForm();
                        alert('Consulta excluída com sucesso!');
                    },
                    error: function () {
                        alert('Erro ao excluir consulta. Tente novamente.');
                    }
                });
            }

            // Resetar formulário
            function resetForm() {
                $('#patient-form')[0].reset();
                $('#PatientID').val('');
                $('#no-patient-selected').show();
                $('#patient-form').hide();
                selectedPatientId = null;
            }

            // Navegação do calendário
            $('#prev-month').on('click', function () {
                const month = parseInt($('#current-month').data('month'));
                const year = parseInt($('#current-month').data('year'));

                if (month === 0) {
                    updateHeader(11, year - 1);
                    loadCalendar(11, year - 1);
                } else {
                    updateHeader(month - 1, year);
                    loadCalendar(month - 1, year);
                }
            });

            $('#next-month').on('click', function () {
                const month = parseInt($('#current-month').data('month'));
                const year = parseInt($('#current-month').data('year'));

                if (month === 11) {
                    updateHeader(0, year + 1);
                    loadCalendar(0, year + 1);
                } else {
                    updateHeader(month + 1, year);
                    loadCalendar(month + 1, year);
                }
            });

            // Atualizar cabeçalho do calendário
            function updateHeader(month, year) {
                const months = ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
                    "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"];
                $('#current-month').text(months[month] + ' ' + year);
                $('#current-month').data('month', month);
                $('#current-month').data('year', year);
            }

            // Eventos dos botões
            $('#save-btn').on('click', function () {
                if (!validateForm()) return;

                const formData = $('#patient-form').serialize();

                $.ajax({
                    url: '@Url.Action("Update", "Patient")',
                    type: 'POST',
                    data: formData,
                    success: function (result) {
                        // Recarregar dados
                        if (selectedDate) {
                            loadTimeSlots(selectedDate);
                        }
                        resetForm();
                        alert('Dados do paciente atualizados com sucesso!');
                    },
                    error: function () {
                        alert('Erro ao salvar dados. Tente novamente.');
                    }
                });
            });

            $('#reschedule-btn').on('click', function () {
                if (selectedPatientId) {
                    // Obter dados do paciente selecionado
                    const patient = {
                        id: $('#PatientID').val(),
                        appointmentDate: $('#AppointmentDate').val(),
                        appointmentTime: $('#AppointmentTime').val()
                    };

                    openRescheduleModal(patient);
                } else {
                    alert('Selecione um paciente primeiro.');
                }
            });

            $('#delete-btn').on('click', function () {
                if (selectedPatientId) {
                    if (confirm('Tem certeza que deseja excluir esta consulta?')) {
                        deleteAppointment(selectedPatientId);
                    }
                } else {
                    alert('Selecione um paciente primeiro.');
                }
            });

            $('#cancel-btn').on('click', function () {
                resetForm();
            });

            // Validação básica do formulário
            function validateForm() {
                const name = $('#Name').val();
                const email = $('#Email').val();

                if (!name) {
                    alert('O nome do paciente é obrigatório.');
                    return false;
                }

                if (!email) {
                    alert('O email do paciente é obrigatório.');
                    return false;
                }

                return true;
            }

            // Iniciar com o formulário oculto
            $('#patient-form').hide();
        });
    </script>
}